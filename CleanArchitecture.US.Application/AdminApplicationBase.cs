/*File generated by custome templates
Important: Do not modify this file.Edit the file AdminApplication.cs instead.
*/
#region using directives
using System;
using System.Transactions;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using CleanArchitecture.US.Domain;
using CleanArchitecture.US.Common;
using CleanArchitecture.US.Application.Interface;
using CleanArchitecture.US.Infrastructure.Interface;

#endregion

namespace CleanArchitecture.US.Application
{
     public class AdminApplicationBase:BaseApplication, IBaseApplication<Admin>
    {
      #region Properties
         private IAdminInfrastructure _adminInfrastructure { get; }
      #endregion

      #region Constructor
       public AdminApplicationBase(IAdminInfrastructure adminInfrastructure, IConfiguration configuration, ILogger<AdminApplication> logger) : base(configuration, logger)
      {
        this._adminInfrastructure = adminInfrastructure;
      }
      #endregion

      #region Methods
       public async Task<Admin> Save(Admin entity, bool createTransaction) 
      {
        //AppLogger.LogEnter();
        TransactionScope scope = null;
          try
         { 
         if (createTransaction)
         {
             scope = new TransactionScope(TransactionScopeOption.Required,
             new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted });
         }
          await Save(entity);
          scope?.Complete();
         } 
          finally 
         { 
          scope?.Dispose();
         //AppLogger.LogExit();
         } 
          return entity; 
      }
      [DataObjectMethod(DataObjectMethodType.Update)]
       internal async Task<Admin> Save(Admin entity ) 
      {
        //AppLogger.LogEnter();
        if (!entity.IsValid())
        {
          //throw new DataValidationException();
        }
           switch (entity.RowState) 
           { 
           case EntityState.New: 
            await _adminInfrastructure.Insert(entity); 
           break; 
            case EntityState.Modified: 
            await _adminInfrastructure.Update(entity); 
            break; 
           case EntityState.Deleted: 
           await _adminInfrastructure.Delete(entity); 
            break; 
           } 
         //AppLogger.LogExit();
          return entity; 
      }
       public async Task<IList<Admin>> Save(IList<Admin> entityCollection, bool createTransaction) 
      {
        //AppLogger.LogEnter();
        TransactionScope scope = null;
          try
         { 
         if (createTransaction) 
         {
             scope = new TransactionScope(TransactionScopeOption.Required,
             new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted });
         }
          await Save(entityCollection);
          scope?.Complete();
         } 
          finally 
         { 
          scope?.Dispose();
         //AppLogger.LogExit();
         } 
          return entityCollection; 
      }
      [DataObjectMethod(DataObjectMethodType.Update)]
       internal async Task<IList<Admin>>  Save( IList<Admin> entityCollection) 
      {
        //AppLogger.LogEnter();
         bool isAllValid = true; 
          try
         { 
          foreach (var entity in entityCollection) 
        {
           if (!entity.IsValid()) isAllValid = false; 
        }
        if (!isAllValid)
        {
          //throw new DataValidationException();
        }
           await _adminInfrastructure.Update(entityCollection);  
          return entityCollection; 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      [DataObjectMethod(DataObjectMethodType.Select)]
       public async Task<Admin> GetById(Int32  adminId) 
      {
        //AppLogger.LogEnter();
          try
         { 
         var entity = await _adminInfrastructure.GetById(adminId); 
         if(entity == null) return  new Admin();
           return entity; 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      [DataObjectMethod(DataObjectMethodType.Select)]
       public async Task<IList<Admin>> GetAll() 
      {
        //AppLogger.LogEnter();
          try
         { 
         var collection = await _adminInfrastructure.GetAll();
          return collection; 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      #endregion
    }
    }

