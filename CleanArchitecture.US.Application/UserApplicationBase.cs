/*File generated by custome templates
Important: Do not modify this file.Edit the file UserApplication.cs instead.
*/
#region using directives
using System;
using System.Transactions;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using CleanArchitecture.US.Domain;
using CleanArchitecture.US.Application.Interface;
using CleanArchitecture.US.Infrastructure.Interface;

#endregion

namespace CleanArchitecture.US.Application
{
     public class UserApplicationBase:BaseApplication, IBaseApplication<User>
    {
      #region Properties
         private IUserInfrastructure _userInfrastructure { get; }
      #endregion

      #region Constructor
       public UserApplicationBase(IUserInfrastructure userInfrastructure, IConfiguration configuration, ILogger<UserApplication> logger) : base(configuration, logger)
      {
        this._userInfrastructure = userInfrastructure;
      }
      #endregion

      #region Methods
       public async Task<User> Save(User entity, bool createTransaction) 
      {
        //AppLogger.LogEnter();
        TransactionScope scope = null;
          try
         { 
         if (createTransaction)
         {
             scope = new TransactionScope(TransactionScopeOption.Required,
             new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted });
         }
          await Save(entity);
          scope?.Complete();
         } 
          finally 
         { 
          scope?.Dispose();
         //AppLogger.LogExit();
         } 
          return entity; 
      }
      [DataObjectMethod(DataObjectMethodType.Update)]
       internal async Task<User> Save(User entity ) 
      {
        //AppLogger.LogEnter();
        if (!entity.IsValid())
        {
          //throw new DataValidationException();
        }
           switch (entity.RowState) 
           { 
           case EntityState.New: 
            await _userInfrastructure.Insert(entity); 
           break; 
            case EntityState.Modified: 
            await _userInfrastructure.Update(entity); 
            break; 
           case EntityState.Deleted: 
           await _userInfrastructure.Delete(entity); 
            break; 
           } 
         //AppLogger.LogExit();
          return entity; 
      }
       public async Task<IList<User>> Save(IList<User> entityCollection, bool createTransaction) 
      {
        //AppLogger.LogEnter();
        TransactionScope scope = null;
          try
         { 
         if (createTransaction) 
         {
             scope = new TransactionScope(TransactionScopeOption.Required,
             new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted });
         }
          await Save(entityCollection);
          scope?.Complete();
         } 
          finally 
         { 
          scope?.Dispose();
         //AppLogger.LogExit();
         } 
          return entityCollection; 
      }
      [DataObjectMethod(DataObjectMethodType.Update)]
       internal async Task<IList<User>>  Save( IList<User> entityCollection) 
      {
        //AppLogger.LogEnter();
         bool isAllValid = true; 
          try
         { 
          foreach (var entity in entityCollection) 
        {
           if (!entity.IsValid()) isAllValid = false; 
        }
        if (!isAllValid)
        {
          //throw new DataValidationException();
        }
           await _userInfrastructure.Update(entityCollection);  
          return entityCollection; 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      [DataObjectMethod(DataObjectMethodType.Select)]
       public async Task<User> GetById(Int32  userId) 
      {
        //AppLogger.LogEnter();
          try
         { 
         var entity = await _userInfrastructure.GetById(userId); 
         if(entity == null) return  new User();
           return entity; 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      [DataObjectMethod(DataObjectMethodType.Select)]
       public async Task<IList<User>> GetListByForeignKeyAdminId(Int32 adminId) 
      {
        //AppLogger.LogEnter();
          try
         { 
         return await _userInfrastructure.GetListByForeignKeyAdminId(adminId); 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      [DataObjectMethod(DataObjectMethodType.Select)]
       public async Task<IList<User>> GetAll() 
      {
        //AppLogger.LogEnter();
          try
         { 
         var collection = await _userInfrastructure.GetAll();
          return collection; 
         } 
          finally 
         { 
         //AppLogger.LogExit();
         } 
      }
      #endregion
    }
    }

