/*
File generated by custome templates
Important: Do not modify this file. Edit the file UserInfrastructure.cs instead.
*/
#region using directives
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using CleanArchitecture.US.Infrastructure.Interface;
using CleanArchitecture.US.Domain;
using CleanArchitecture.US.Common.NLog;
#endregion

namespace CleanArchitecture.US.Infrastructure
{
    /// <summary>
    /// This class handles the CRUD operations of the <table></table> 
    /// It is generated using the Generic ORM framework 
     /// </summary> 
     public class UserInfrastructureBase: SqlBaseInfrastructure, IBaseInfrastructure<User>
    {
    public UserInfrastructureBase(IConfiguration configuration, ILoggerManager logger) : base(configuration, logger)
    {}
    public UserInfrastructureBase(IConfiguration configuration) : base(configuration)
    {}
             public enum UserColumn
           {
              AdminId=1,CreatedBy=2,FirstName=3,UserId=4
           }
     protected static IList<User> Fill(IDataReader reader, IList<User> rows, int start, int pageLength) 
    {
      // advance to the starting row
      for (int i = 0; i < start; i++)
      {
       if (!reader.Read()) 
       return rows; // not enough rows, just return
      }
      if (pageLength <= 0) pageLength = 99999999; //100 million by default  
       for (int i = 0; i < pageLength; i++) 
      {
       if (!reader.Read()) 
        {break;} // we are done

        var c = new User();
         c.AdminId = (Int32)reader[((int)UserColumn.AdminId - 1)]; 
         c.CreatedBy = (Int32)reader[((int)UserColumn.CreatedBy - 1)]; 
         c.FirstName = (string)reader[((int)UserColumn.FirstName - 1)]; 
         c.UserId = (Int32)reader[((int)UserColumn.UserId - 1)]; 
        c.AcceptChanges();
        rows.Add(c); 
      }
         return rows; 
      }
     public async Task<User> GetById(Int32 userId) 
    {
      SqlConnection conn = null;
      SqlCommand cmd = null;
      try
      {
      conn =  GetConnection();
      cmd = GetSqlCommand(conn, "dbo.gen_User_GetByuser_id", true); 
       cmd.Parameters.Add(GetInParameter("@UserId", SqlDbType.Int, userId)); 
       IList<User> tmp = new List<User>();
      IDataReader reader = await ExecuteReaderAsync(cmd);
      Fill(reader, tmp, 0, 0);
       if ( !reader.IsClosed) reader.Close(); 
       return tmp.Count > 0 ? tmp[0] : null;
      }
      finally
      {
       conn?.Dispose();
       cmd?.Dispose(); 
      }
    }
     public async Task<bool> Delete(User entity ) 
    {
      SqlConnection conn = null;
      try
      {
      conn =  GetConnection();
      return await Delete(entity, conn);
      }
      finally
      {
        conn?.Dispose();
      }
    }
     public async Task<bool> Delete(User entity, SqlConnection conn) 
    {
      SqlCommand cmd = null;
      try
      {
      cmd = GetSqlCommand(conn, "dbo.gen_User_Delete", true);
       cmd.Parameters.Add(GetInParameter("@UserId", SqlDbType.Int, entity.UserId)); 
       await cmd.ExecuteNonQueryAsync();
      return true;
      }
      finally
      {
        cmd?.Dispose(); 
      }
    }
     public async Task<IList<User>> GetListByForeignKeyAdminId(Int32 adminId) 
    {
      SqlConnection conn = null;
      SqlCommand cmd = null;
      try
      {
      conn = GetConnection();
      cmd = GetSqlCommand(conn, "dbo.gen_User_GetListByForeignKey_AdminId", true);
      cmd.Parameters.Add(GetInParameter("@AdminId", SqlDbType.Int, adminId)); 
       IList<User> tmp = new List<User>();
      IDataReader reader = await ExecuteReaderAsync(cmd);
      Fill(reader, tmp, 0, 0);
       if (!reader.IsClosed) reader.Close(); 
      return tmp;
      }
      finally
      {
       conn?.Dispose();
       cmd?.Dispose(); 
      }
    }
     public async Task<IList<User>> GetAll() 
    {
      SqlConnection conn = null;
      SqlCommand cmd = null;
      try
      {
      conn = GetConnection();
      cmd = GetSqlCommand(conn, "dbo.gen_User_GetAll", true);
       IList<User> tmp = new List<User>();
      IDataReader reader = await ExecuteReaderAsync(cmd);
      Fill(reader, tmp, 0, 0);
       if (!reader.IsClosed) reader.Close(); 
      return tmp;
      }
      finally
      {
       conn?.Dispose();
       cmd?.Dispose(); 
      }
    }
    public async Task<bool>  Insert(User entity) 
    {
      SqlConnection conn = null;
      try
      {
        conn = GetConnection();
        return await Insert(entity, conn);
      }
        finally 
       { 
        conn?.Dispose();
       } 
    }
    public async Task<bool>  Insert(User entity, SqlConnection conn) 
    {
      SqlCommand cmd = null;
      try
      {
      cmd = GetSqlCommand(conn, "dbo.gen_User_Insert", true);
       cmd.Parameters.Add(GetInParameter("@AdminId", SqlDbType.Int, entity.AdminId)); 
       cmd.Parameters.Add(GetInParameter("@CreatedBy", SqlDbType.Int, entity.CreatedBy)); 
       cmd.Parameters.Add(GetInParameter("@FirstName", SqlDbType.NVarChar, entity.FirstName)); 
      cmd.Parameters.Add(GetOutParameter("@UserId", SqlDbType.Int)); 
       await cmd.ExecuteNonQueryAsync();
       entity.UserId = (Int32) cmd.Parameters["@UserId"].Value; 
       entity.AcceptChanges();
       return true; 
      }
      finally
      {
       cmd?.Dispose(); 
      }
    }
    public async Task<bool>  Update(User entity) 
    {
      SqlConnection conn = null;
      try
      {
        conn = GetConnection();
        return await Update(entity, conn);
      }
        finally 
       { 
        conn?.Dispose();
       } 
    }
    public async Task<bool> Update(User entity, SqlConnection conn) 
    {
      SqlCommand cmd = null;
      try
      {
      cmd = GetSqlCommand(conn, "dbo.gen_User_Update", true);
       cmd.Parameters.Add(GetInParameter("@AdminId", SqlDbType.Int, entity.AdminId)); 
       cmd.Parameters.Add(GetInParameter("@CreatedBy", SqlDbType.Int, entity.CreatedBy)); 
       cmd.Parameters.Add(GetInParameter("@FirstName", SqlDbType.NVarChar, entity.FirstName)); 
       cmd.Parameters.Add(GetInParameter("@UserId", SqlDbType.Int, entity.UserId)); 
       await cmd.ExecuteNonQueryAsync();
       entity.AcceptChanges();
       return true;
      }
      finally
      {
       cmd?.Dispose(); 
      }
    }
     public async Task<int> Update(IList<User> entities) 
    {
      SqlConnection conn = null;
      try
      {
        conn = GetConnection();
       int count = 0;
       foreach (var entity in entities)
      {
        if (entity.RowState == EntityState.Modified) 
       {
       if (await Update(entity, conn)) 
       {
       count++;

       }
       }
        else if (entity.RowState == EntityState.New) 
       {
        if (await Insert(entity, conn))
       {
       count++;

       }
       }
        else if (entity.RowState == EntityState.Deleted) 
       {
        if (await Delete(entity, conn))
       {
       count++;

       }
       }
      }
         return count; 
      }
        finally 
       { 
        conn?.Dispose();
       }       }
    }
}

